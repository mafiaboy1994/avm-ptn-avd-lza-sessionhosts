name: Semver Auto-Tag with PAT

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Get latest remote tag
        id: get_tag
        env:
          PAT: ${{ secrets.GH_PAT }}
        run: |
          repo="https://x-access-token:${PAT}@github.com/${{ github.repository }}"
      
          latest_tag=$(git ls-remote --tags --sort="v:refname" $repo | \
            grep -o 'refs/tags/v[0-9]*\.[0-9]*\.[0-9]*$' | \
            sed 's#refs/tags/##' | \
            sort -V | \
            tail -n1)
      
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
      
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Determine bump type from commit message
        id: bump
        run: |
          commit_msg=$(git log -1 --pretty=%B)
          echo "Last commit: $commit_msg"

          if [[ "$commit_msg" == *#major* ]]; then
            bump="major"
          elif [[ "$commit_msg" == *#minor* ]]; then
            bump="minor"
          else
            bump="patch"
          fi

          echo "bump_type=$bump" >> $GITHUB_OUTPUT
          
      - name: Calculate new version
        id: version
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          version="${tag#v}"
          IFS='.' read -r major minor patch <<< "$version"
      
          case "${{ steps.bump.outputs.bump_type }}" in
            major)
              major=$((major + 1)); minor=0; patch=0;;
            minor)
              minor=$((minor + 1)); patch=0;;
            patch)
              patch=$((patch + 1));;
          esac
      
          new_tag="v$major.$minor.$patch"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
      
      - name: Create and push tag
        env:
          PAT: ${{ secrets.GH_PAT }}
        run: |
          # Check if the tag already exists on the remote
          if git ls-remote --tags https://x-access-token:${PAT}@github.com/${{ github.repository }} | grep -q "refs/tags/${{ steps.version.outputs.new_tag }}"; then
            echo "Tag ${{ steps.version.outputs.new_tag }} already exists. Skipping tag creation."
            exit 0
          fi
          # Create and push the tag
          git tag -a "${{ steps.version.outputs.new_tag }}" -m "Release ${{ steps.version.outputs.new_tag }}"
          git push https://x-access-token:${PAT}@github.com/${{ github.repository }} "${{ steps.version.outputs.new_tag }}"
      # - name: Create GitHub Release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      #   with:
      #     tag_name: ${{ steps.version.outputs.new_tag }}
      #     release_name: Release ${{ steps.version.outputs.new_tag }}
      #     body: |
      #       Automated release for commit ${{ github.sha }} & Version ${{ steps.version.outputs.new_tag }}
      #     draft: false
      #     generate_release_notes: true
      #     prerelease: false
      - name: Generate GitHub Release Notes + Custom Body
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}  # Or GITHUB_TOKEN if it has the right permissions
          TAG_NAME: ${{ steps.version.outputs.new_tag }}
        run: |
          # Get generated release notes
          NOTES=$(curl -s -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d "{\"tag_name\":\"$TAG_NAME\"}")

          GENERATED_BODY=$(echo "$NOTES" | jq -r .body)

          # Your custom content
          CUSTOM_BODY="ðŸŽ‰ Automated release for commit ${{ github.sha }}"

          # Combine both
          FINAL_BODY="$CUSTOM_BODY

          ---

          $GENERATED_BODY"

              # Create the release with the combined body
              curl -X POST -H "Authorization: token $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/repos/${{ github.repository }}/releases \
                -d @- <<EOF
          {
            "tag_name": "$TAG_NAME",
            "name": "Release $TAG_NAME",
            "body": "$FINAL_BODY",
            "draft": false,
            "prerelease": false
          }
          EOF
